/* tslint:disable */
/* eslint-disable */
/**
 * avoindata-api
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Dataset,
  FileData,
  GetDataset404Response,
  GetDatasetShorts200Response,
  IWithPaginationFileData,
  TimeseriesData,
  TimeseriesDataResponse,
  ValidateError,
} from '../models/index';
import {
    DatasetFromJSON,
    DatasetToJSON,
    FileDataFromJSON,
    FileDataToJSON,
    GetDataset404ResponseFromJSON,
    GetDataset404ResponseToJSON,
    GetDatasetShorts200ResponseFromJSON,
    GetDatasetShorts200ResponseToJSON,
    IWithPaginationFileDataFromJSON,
    IWithPaginationFileDataToJSON,
    TimeseriesDataFromJSON,
    TimeseriesDataToJSON,
    TimeseriesDataResponseFromJSON,
    TimeseriesDataResponseToJSON,
    ValidateErrorFromJSON,
    ValidateErrorToJSON,
} from '../models/index';

export interface GetDatasetRequest {
    datasetId: number;
}

export interface GetDatasetDataRequest {
    datasetId: number;
    startTime?: Date;
    endTime?: Date;
    format?: GetDatasetDataFormatEnum;
    oneRowPerTimePeriod?: boolean;
    page?: number;
    pageSize?: number;
    locale?: GetDatasetDataLocaleEnum;
    sortBy?: GetDatasetDataSortByEnum;
    sortOrder?: GetDatasetDataSortOrderEnum;
}

export interface GetDatasetFileRequest {
    datasetId: number;
    fileId: number;
}

export interface GetDatasetFileDataRequest {
    datasetId: number;
    startTime?: Date;
    endTime?: Date;
    page?: number;
    pageSize?: number;
    sortOrder?: GetDatasetFileDataSortOrderEnum;
}

export interface GetDatasetShortsRequest {
    search?: string;
    ids?: string;
    page?: number;
    pageSize?: number;
    orderBy?: GetDatasetShortsOrderByEnum;
}

export interface GetLastDataByDatasetRequest {
    datasetId: number;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     * Returns a single dataset or 404 error if not found
     * GetDataset
     */
    async getDatasetRaw(requestParameters: GetDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Returns a single dataset or 404 error if not found
     * GetDataset
     */
    async getDataset(requestParameters: GetDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.getDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns datasetdata or empty array if no data is found.
     * GetDatasetData
     */
    async getDatasetDataRaw(requestParameters: GetDatasetDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesDataResponse>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getDatasetData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['oneRowPerTimePeriod'] != null) {
            queryParameters['oneRowPerTimePeriod'] = requestParameters['oneRowPerTimePeriod'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets/{datasetId}/data`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesDataResponseFromJSON(jsonValue));
    }

    /**
     * Returns datasetdata or empty array if no data is found.
     * GetDatasetData
     */
    async getDatasetData(requestParameters: GetDatasetDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesDataResponse> {
        const response = await this.getDatasetDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single datasetfile or 404 error if not found
     * GetDatasetFile
     */
    async getDatasetFileRaw(requestParameters: GetDatasetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileData>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getDatasetFile().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling getDatasetFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets/{datasetId}/files/{fileId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDataFromJSON(jsonValue));
    }

    /**
     * Return a single datasetfile or 404 error if not found
     * GetDatasetFile
     */
    async getDatasetFile(requestParameters: GetDatasetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileData> {
        const response = await this.getDatasetFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
     * GetDatasetFileData
     */
    async getDatasetFileDataRaw(requestParameters: GetDatasetFileDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IWithPaginationFileData>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getDatasetFileData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets/{datasetId}/files`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IWithPaginationFileDataFromJSON(jsonValue));
    }

    /**
     * Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
     * GetDatasetFileData
     */
    async getDatasetFileData(requestParameters: GetDatasetFileDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IWithPaginationFileData> {
        const response = await this.getDatasetFileDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
     * GetDatasetShorts
     */
    async getDatasetShortsRaw(requestParameters: GetDatasetShortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDatasetShorts200Response>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDatasetShorts200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
     * GetDatasetShorts
     */
    async getDatasetShorts(requestParameters: GetDatasetShortsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDatasetShorts200Response> {
        const response = await this.getDatasetShortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a last data by dataset or 404 error if not found
     * GetLastDataByDataset
     */
    async getLastDataByDatasetRaw(requestParameters: GetLastDataByDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesData>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getLastDataByDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyQuery authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyHeader authentication
        }

        const response = await this.request({
            path: `/datasets/{datasetId}/data/latest`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesDataFromJSON(jsonValue));
    }

    /**
     * Return a last data by dataset or 404 error if not found
     * GetLastDataByDataset
     */
    async getLastDataByDataset(requestParameters: GetLastDataByDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesData> {
        const response = await this.getLastDataByDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetDatasetDataFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Xml: 'xml'
} as const;
export type GetDatasetDataFormatEnum = typeof GetDatasetDataFormatEnum[keyof typeof GetDatasetDataFormatEnum];
/**
 * @export
 */
export const GetDatasetDataLocaleEnum = {
    En: 'en',
    Fi: 'fi'
} as const;
export type GetDatasetDataLocaleEnum = typeof GetDatasetDataLocaleEnum[keyof typeof GetDatasetDataLocaleEnum];
/**
 * @export
 */
export const GetDatasetDataSortByEnum = {
    StartTime: 'startTime',
    EndTime: 'endTime'
} as const;
export type GetDatasetDataSortByEnum = typeof GetDatasetDataSortByEnum[keyof typeof GetDatasetDataSortByEnum];
/**
 * @export
 */
export const GetDatasetDataSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetDatasetDataSortOrderEnum = typeof GetDatasetDataSortOrderEnum[keyof typeof GetDatasetDataSortOrderEnum];
/**
 * @export
 */
export const GetDatasetFileDataSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetDatasetFileDataSortOrderEnum = typeof GetDatasetFileDataSortOrderEnum[keyof typeof GetDatasetFileDataSortOrderEnum];
/**
 * @export
 */
export const GetDatasetShortsOrderByEnum = {
    Id: 'id',
    NameFi: 'nameFi',
    NameEn: 'nameEn'
} as const;
export type GetDatasetShortsOrderByEnum = typeof GetDatasetShortsOrderByEnum[keyof typeof GetDatasetShortsOrderByEnum];
