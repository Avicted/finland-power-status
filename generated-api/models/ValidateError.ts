/* tslint:disable */
/* eslint-disable */
/**
 * avoindata-api
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FieldErrorsValue } from './FieldErrorsValue';
import {
    FieldErrorsValueFromJSON,
    FieldErrorsValueFromJSONTyped,
    FieldErrorsValueToJSON,
    FieldErrorsValueToJSONTyped,
} from './FieldErrorsValue';

/**
 * 
 * @export
 * @interface ValidateError
 */
export interface ValidateError {
    /**
     * 
     * @type {string}
     * @memberof ValidateError
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateError
     */
    stack?: string;
    /**
     * 
     * @type {number}
     * @memberof ValidateError
     */
    status: number;
    /**
     * 
     * @type {{ [key: string]: FieldErrorsValue; }}
     * @memberof ValidateError
     */
    fields: { [key: string]: FieldErrorsValue; };
}

/**
 * Check if a given object implements the ValidateError interface.
 */
export function instanceOfValidateError(value: object): value is ValidateError {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('fields' in value) || value['fields'] === undefined) return false;
    return true;
}

export function ValidateErrorFromJSON(json: any): ValidateError {
    return ValidateErrorFromJSONTyped(json, false);
}

export function ValidateErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidateError {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'message': json['message'],
        'stack': json['stack'] == null ? undefined : json['stack'],
        'status': json['status'],
        'fields': (mapValues(json['fields'], FieldErrorsValueFromJSON)),
    };
}

  export function ValidateErrorToJSON(json: any): ValidateError {
      return ValidateErrorToJSONTyped(json, false);
  }

  export function ValidateErrorToJSONTyped(value?: ValidateError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'message': value['message'],
        'stack': value['stack'],
        'status': value['status'],
        'fields': (mapValues(value['fields'], FieldErrorsValueToJSON)),
    };
}

